apply plugin: 'com.android.application'
apply plugin: 'newlens'

/**
 * 读取版本配置
 */
def Properties mVersionProps = getVersionProperty();

/**
 * 读取版本名
 */
def mVersionName = buildRelease() ? mVersionProps['VERSION_NAME'] : "build_" + buildTime('yyyyMMdd')

/**
 * 输出目录
 */
def mOutputs = "$rootDir/outputs/build_" + buildTime('yyyyMMdd')

android {
    signingConfigs {
        myconfig {
            def Properties buildProps = buildSign()
            storeFile file('../keystore/yunxingzh.com.keystore.jks')
            keyAlias 'yunxingzh'
            keyPassword 'Yunti2016'
            storePassword 'Yunti2016'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.myconfig
        }
        release {
            signingConfig signingConfigs.myconfig
            minifyEnabled false
            zipAlignEnabled true
            debuggable false
            jniDebuggable false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileSdkVersion 24
    buildToolsVersion '24.0.2'
    defaultConfig {
        applicationId "com.yunxingzh.wireless"
        minSdkVersion 17
        targetSdkVersion 22
        versionName = "1.0.9"
        versionCode = 10
        ndk {
            abiFilters "armeabi-v7a" // 例如：abiFilter 'armeabi, x86'
        }
        multiDexEnabled true
        signingConfig signingConfigs.myconfig
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    packagingOptions {
        exclude 'META-INF/maven/com.squareup.okio/okio/pom.xml'
        exclude 'META-INF/maven/com.squareup.okio/okio/pom.properties'
        exclude 'META-INF/services/org.robolectric.internal.ShadowProvider'
    }

    /*听云*/
//    sourceSets {
//        main{
//            jniLibs.srcDirs = ['libs']
//        }
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

//    allprojects {
//        repositories {
//            jcenter()
//        }
//        tasks.withType(JavaCompile) {
//            sourceCompatibility = 1.7
//            targetCompatibility = 1.7
//        }
//    }

    /*友盟多渠道统计*/
    productFlavors {
        xiaomi {}
        baidu {}
        c360 {}
        oppo {}
        vivo {}
        huawei {}
        meizu {}
        tengxun {}
        wandoujia {}
        anzhi {}
        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

    //过滤
    if (buildRelease()) {
        android.variantFilter { variant ->
            if (variant.buildType.name.equals('release')) {
                variant.getFlavors().each() { flavor ->
                    if (flavor.name.equals('buildDebug')) {
                        variant.setIgnore(true);
                    }
                }
            }
        }
    }
    //输出文件配置
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            def fileName
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                if ("release".equals(variant.buildType.name)) {
                    fileName = variant.productFlavors.get(0).name + "_" +
                            variant.mergedFlavor.versionName + "_" + buildTime("yyyyMMddHHmm") + "_release.apk";
                    output.outputFile = new File(mOutputs, fileName);
                } else {
                    output.outputFile = new File(
                            outputFile.parent,
                            "app-debug.apk")
                }
            }
        }
    }
}

afterEvaluate {
    tasks.matching {
        it.name.startsWith('dex')
    }.each { dx ->
        if (dx.additionalParameters == null) {
            dx.additionalParameters = []
        }
        dx.additionalParameters += '--set-max-idx-number=48000'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile files('libs/BaiduLBS_Android.jar')
    compile files('libs/zxing.jar')
    compile files('libs/eventbus-3.0.0.jar')
    compile files('libs/MiPush_SDK_Client_3_2_2.jar')
    compile files('libs/aliyun-java-sdk-core-2.1.7.jar')
    compile files('libs/aliyun-java-sdk-sts-2.1.6.jar')
    compile files('libs/aliyun-oss-sdk-android-2.3.0.jar')
    compile 'com.google.android.gms:play-services-appindexing:9.8.0'
    compile 'com.truizlop.sectionedrecyclerview:library:1.1.0'
    compile files('libs/dg360wifisdk_v1.0.4_out.jar')
    compile 'com.networkbench.newlens.agent.android:nbs.newlens.agent:2.5.1'
    compile 'com.android.support:support-v4:24.2.0'
    compile 'com.android.support:appcompat-v7:24.2.0'
    compile 'com.android.support:recyclerview-v7:24.2.0'
    compile 'com.android.support:support-annotations:22.2.0'
    compile 'com.android.support:design:24.2.1'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'
    compile 'com.squareup.okhttp3:okhttp:3.3.0'
    compile files('libs/fastjson-1.1.52.android.jar')
    compile 'com.zhy:percent-support-extends:1.1.1'
    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.3'
    compile 'de.hdodenhof:circleimageview:1.3.0'
    compile 'io.reactivex:rxjava:1.0.14'
    compile 'io.reactivex:rxandroid:1.0.1'

    // umeng
    compile 'com.umeng.analytics:analytics:latest.integration'
    // leakcanary(检测内存泄漏)
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
}

/****************************************
 *
 *          打包脚本片段　by jerry
 *          修改: andy
 *          描述: 修正一键打包多个版本
 *
 ****************************************/

/**
 * 构建版本
 * @return
 */
def getVersionProperty() {
    def Properties buildProps = new Properties()
    buildProps.load(new FileInputStream(file('../config/version.properties')))
    return buildProps;
}

/**
 * 读取签名
 * @return
 */
def buildSign() {
    def Properties buildProperties = new Properties()
    buildProperties.load(new FileInputStream(file('../config/sign.properties')))
    return buildProperties
}

/**
 * 构建时间
 * @return
 */
def buildTime(String time) {
    def date = new Date()
    def formattedDate = date.format(time)
    return formattedDate
}

/**
 * 是否发布
 * 发布为真
 * 版本号自增
 * @return
 */
def buildRelease() {
    return false
}

/**
 * 读取Git日志
 * @return
 */
def getGitVersion() {

    return 'git rev-parse --short HEAD'.execute().text.trim()
}

/**
 * 输出日志
 */
def buildLog(String output,String vName,String vCode) {
    File outputFile = new File(output)
    if(!outputFile.exists())
        outputFile.mkdirs()
    FileWriter fw = new FileWriter(output + File.separator + "log.txt")
    StringBuilder builder = new StringBuilder();
    builder.append("[构建时间]=" + buildTime("yy-MM-dd HH:mm"))
    builder.append("\r\n")
    builder.append("[版本编号]=" + vCode)
    builder.append("\r\n")
    builder.append("[版本名称]=" + vName)
    builder.append("\r\n")
    builder.append("[提交记录]=" + getGitVersion())
    fw.write(builder.toString())
    fw.flush();
    fw.close();
}

build {
    doLast {
        buildLog(mOutputs,mVersionName,mVersionProps['VERSION_CODE'])
        copy {
            from "$buildDir/outputs/mapping"
            into mOutputs
        }
    }
}


